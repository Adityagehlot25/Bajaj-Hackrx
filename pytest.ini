# Pytest Configuration File for Document AI Q&A System
# This file configures pytest behavior for comprehensive testing

[tool:pytest]
# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Directories to search for tests
testpaths = .

# Minimum version
minversion = 6.0

# Add options for async testing
asyncio_mode = auto

# Markers for categorizing tests
markers =
    unit: Unit tests for individual components
    integration: Integration tests for API endpoints  
    performance: Performance and timing tests
    security: Security and authentication tests
    explainability: Tests for AI explainability and source attribution
    slow: Tests that take longer to run
    network: Tests that would make network calls (should use mocks)
    api: Tests for FastAPI endpoints
    auth: Tests for authentication and authorization
    hackrx: Tests specific to HackRx API endpoints

# Test output options
addopts = 
    -v
    --strict-markers
    --tb=short
    --durations=10
    --cov=main
    --cov=gemini_answer
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --junitxml=junit.xml

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = .
omit = 
    */venv/*
    */env/*
    */__pycache__/*
    */tests/*
    test_*.py
    *_test.py
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
